package NeuralNetworks.LayeredNeuralNetwork;

import NeuralNetworks.FullyConnected;
import Utilities.Matrix;
import Utilities.ActivationFunctions.ReluFunction;

public class ConvolutionalLayer extends Layer {
	private Matrix[] input, output;
	
	private Matrix[][] kernals;
	private double[] biases;
	
	private int padding, stride;
	private int kernalCount, kernalSize;
	
	private Matrix[][] weightVelocities;
	private double[] biasVelocities;
			
	private double velocityCoeficcient = 0.9;
	private double learningRate = 0.001;
	
	/**
	 * Sources:
	 * 	https://www.jefkine.com/general/2016/09/05/backpropagation-in-convolutional-neural-networks/
	 *  http://cs231n.github.io/convolutional-networks/
	 *  http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf
	 *  https://becominghuman.ai/only-numpy-implementing-convolutional-neural-network-using-numpy-deriving-forward-feed-and-back-458a5250d6e4
	 *  
	 *  http://web.eecs.utk.edu/~zzhang61/docs/reports/2016.10%20-%20Derivation%20of%20Backpropagation%20in%20Convolutional%20Neural%20Network%20(CNN).pdf
	 *  http://cogprints.org/5869/1/cnn_tutorial.pdf
	 *  
	 *  https://stats.stackexchange.com/questions/361817/back-propagation-in-convolution-layer
	 */
	public ConvolutionalLayer(LayeredNeuralNetwork network, int layer, int padding, int stride, int kernalCount, int kernalSize, int kernalDimensionalExtent) {
		super(network, layer);
		
		this.padding = padding;
		this.stride = stride;
		this.kernalCount = kernalCount;
		this.kernalSize = kernalSize;
		
		kernals = new Matrix[kernalCount][kernalDimensionalExtent];
		weightVelocities = new Matrix[kernalCount][kernalDimensionalExtent];
		
		for(int i = 0; i < kernals.length; i++) {
		for(int j = 0; j < kernals[0].length; j++) {
			kernals[i][j] = Matrix.random(kernalSize, kernalSize, -1, 1);
			weightVelocities[i][j] = new Matrix(kernalSize, kernalSize);
		}}
		
		biases = new double[kernalCount];
		biasVelocities = new double[biases.length];
		
		for(int i = 0; i < biases.length; i++) 
			biases[i] = (Math.random() * 2.0) - 1.0;
	}

	public void initialize() {
		Layer previousLayer = getPreviousLayer();
		
		if(previousLayer == null) {
			inputMatrixCount = network.getInputMatrixCount();
			inputNRows = network.getInputNRows();
			inputNCols = network.getInputNCols();
		} else {
			inputMatrixCount = previousLayer.getOutputMatrixCount();
			inputNRows = previousLayer.getOutputNRows();
			inputNCols = previousLayer.getOutputNCols();
		}
		
		outputMatrixCount = kernalCount;
		
		double outputWidth = ((inputNCols - kernalSize + (2.0 * padding)) / ((double) stride)) + 1.0;
		double outputHeight = ((inputNRows - kernalSize + (2.0 * padding)) / ((double) stride)) + 1.0;
		
		if((int) outputWidth != outputWidth) {
			System.err.println("Invalid Conv Width!");
//			System.exit(-1);
		}
		
		if((int) outputHeight != outputHeight) {
			System.err.println("Invalid Conv Height!");
//			System.exit(-1);
		}
		
		outputNCols = (int) outputWidth;
		outputNRows = (int) outputHeight;
		
		input = new Matrix[inputMatrixCount];
		
		output = new Matrix[kernalCount];
		for(int i = 0; i < output.length; i++) 
			output[i] = new Matrix(outputNRows, outputNCols);
	}
	
	protected Matrix[] forward(Matrix[] input) {
		if(padding != 0) {
			for(int i = 0; i < input.length; i++) {
				this.input[i] = input[i].pad(padding);
			}
		} else {
			for(int i = 0; i < input.length; i++) {
				this.input[i] = new Matrix(input[i]);
			}
		}

		for(int row = 0; row <= input[0].getNRows() - kernalSize; row += stride) {
		for(int col = 0; col <= input[0].getNCols() - kernalSize; col += stride) {
			for(int kernalSet = 0; kernalSet < kernals.length; kernalSet++) {
				double sum = 0.0;
				for(int kernal = 0; kernal < kernals[kernalSet].length; kernal++) 
					sum += this.input[kernal].elementWiseProduct(kernals[kernalSet][kernal], col, row);
				
				sum += biases[kernalSet];
				
				output[kernalSet].set(row / stride, col / stride, sum);
			}
		}}
		
		return output;
	}
	
	protected Matrix[] back(Matrix[] error) {
		Matrix[] nextError = null;
		
		if(index != 0) {
			nextError = new Matrix[input.length]; 
			for(int j = 0; j < kernals[0].length; j++) {
				Matrix sum = null;
				
				for(int i = 0; i < kernals.length; i++) {
//					Matrix temp = fullConvolute(error[i], kernals[i][j].flip(), 1);
					Matrix temp = convolute(error[i], kernals[i][j].flip(), padding, stride);
					
					if(sum == null)//Why construct a whole other matrix?
						sum = temp;//Set to the current matrix, and then start adding to it
					else
						sum.mAdd(temp);
				}
				
				nextError[j] = sum;
			}
		}
		
//		for(int i = 0; i < nextError.length; i++) {
//			Matrix sum = null;
//			
//			for(int j = 0; j < kernals[0].length; j++) {
//				Matrix temp = fullConvolute(error[i], kernals[i][j].flip());
//				
//				if(sum == null)//Why construct a whole other matrix?
//					sum = temp;//Set to the current matrix, and then start adding to it
//				else
//					sum.mAdd(temp);
//			}
//			
//			nextError[i] = sum;
//		}
		
//		System.out.println(index + ", " + error.length);
		
		for(int i = 0; i < error.length; i++) {
			Matrix gradient = null;
			
			for(int in = 0; in < input.length; in++) {
				Matrix temp = convolute(input[in], error[i], 1);
				
				if(gradient == null)
					gradient = temp;
				else
					gradient.mAdd(temp);
			}

			gradient.mScale(learningRate);
			
			biasVelocities[i] *= velocityCoeficcient;
			biases[i] -= biasVelocities[i];
			biasVelocities[i] -= gradient.sum();
			biases[i] += biasVelocities[i] * (1.0 + velocityCoeficcient);
			
			for(int kernal = 0; kernal < kernals[i].length; kernal++) {
				weightVelocities[i][kernal].mScale(velocityCoeficcient);
				   
				kernals[i][kernal].mSubtract(weightVelocities[i][kernal])
					.mAdd(weightVelocities[i][kernal].mSubtract(gradient).scale(1.0 + velocityCoeficcient));
				
//				kernals[i][kernal].mSubtract(gradient.mScale(0.001));
			}
		}
		
		return nextError;
	}
	
	public static Matrix fullConvolute(Matrix data, Matrix filter) {
		Matrix d = data.pad(filter.getNRows() - 1);
		return convolute(d, filter, filter.getNRows() == data.getNRows() ? 1 : filter.getNRows());
	}
	
	public static Matrix fullConvolute(Matrix data, Matrix filter, int stride) {
		Matrix d = data.pad(filter.getNRows() - 1);
		return convolute(d, filter, stride);
	}
	
//	public static Matrix fullConvolute(Matrix data, Matrix filter, int stride) {
//		Matrix d = data.pad(filter.getNRows() - 1);
//		return convolute(d, filter, stride);
//	}
	
	public static Matrix convolute(Matrix data, Matrix filter) {
		return convolute(data, filter, filter.getNRows());
	}
	
	public static Matrix convolute(Matrix data, Matrix filter, int padding, int stride) {
		Matrix d = data.pad(padding);
		return convolute(d, filter, stride);
	}
	
	public static Matrix convolute(Matrix data, Matrix filter, int stride) {
		double outputWidth = ((data.getNCols() - filter.getNCols()) / ((double) stride)) + 1.0;
		double outputHeight = ((data.getNRows() - filter.getNRows()) / ((double) stride)) + 1.0;
		
		if((int) outputWidth != outputWidth) {
			System.err.println("Invalid Conv Width!");
			return null;
		}
		
		if((int) outputHeight != outputHeight) {
			System.err.println("Invalid Conv Height!");
			return null;
		}
		
		Matrix output = new Matrix((int) outputHeight, (int) outputWidth);
		
		for(int y = 0; y <= data.getNRows() - filter.getNRows(); y += stride) {
		for(int x = 0; x <= data.getNCols() - filter.getNCols(); x += stride) {
			output.set(y / stride, x / stride, data.elementWiseProduct(filter, x, y));
		}}
		
		return output;
	}
	
	public Matrix[][] getKernals() { return kernals; }

	@Override
	protected Matrix[] calculate(Matrix[] input) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public static void main(String[] args) {
		LayeredNeuralNetwork network = new LayeredNeuralNetwork(1, 20, 20, 1, 1);
		
		ConvolutionalLayer conv1 = new ConvolutionalLayer(network, 0, 3, 3, 2, 5, 1);
		ActivationLayer activation = new ActivationLayer(network, 1, new ReluFunction());
		ConvolutionalLayer conv2 = new ConvolutionalLayer(network, 2, 0, 2, 1, 2, 2);
		FullyConnectedLayer full = new FullyConnectedLayer(network, 3, new int[] {16, 1});
		
		network.layers = new Layer[4];
		network.layers[0] = conv1;
		network.layers[1] = activation;
		network.layers[2] = conv2;
		network.layers[3] = full;
		
		conv1.init();
		activation.init();
		conv2.init();
		full.init();
		
		Matrix[] input = new Matrix[] {
			new Matrix(new double[][] {
				{0.39952630492250185, 0.8736500547250404, 0.4798435228788178, 0.6197207412291529, 0.6211445202770014, 0.9112032055020536, 0.31886822415314486, 0.8264114651413172, 0.17305196264703449, 0.7104191024700085, 0.4043665385594075, 0.5082783377108547, 0.3419345925688547, 0.9941533014778546, 0.36627346594639887, 0.5013463106062429, 0.075864363419191, 0.7097684933143975, 0.3863435556423681, 0.46534764992383826},
				{0.08686760093414858, 0.06146794890110918, 0.5541720832215905, 0.3677083244857121, 0.8622011132556363, 0.24843281201476075, 0.19053289635566173, 0.8663466998920747, 0.010391680606588793, 0.3477584950305578, 0.06067083179193944, 0.42139319996078184, 0.18157163045205882, 0.696224990979999, 0.9792880878641629, 0.27160361226172725, 0.3963694733258154, 0.07122410816798364, 0.1693159357212447, 0.24815271323108445},
				{0.9935911143738577, 0.9487064121206807, 0.8781639689271983, 0.7666592433584125, 0.564153772372135, 0.12479962465239669, 0.1779914521506104, 0.23770694599844866, 0.177211610329699, 0.02778890288676583, 0.5806463146984202, 0.5667907355734915, 0.9241379133894649, 0.11843871111589, 0.08326917883018636, 0.3765309349122181, 0.30700615259807285, 0.8791754285933993, 0.5271612644179855, 0.07716269207695425},
				{0.2804378560541675, 0.02643821464090168, 0.7003666666400209, 0.9357217817348069, 0.81916256744873, 0.7455451394703145, 0.4435208702746275, 0.8500118659170547, 0.728361534465914, 0.9437106947709986, 0.12886930706297395, 0.6203526491415133, 0.03984274686577949, 0.7443894776769646, 0.27396077651611106, 0.13027200635019598, 0.7443224436699988, 0.7049105853318196, 0.7243727514199827, 0.9967198323753241},
				{0.7985641163753538, 0.5294052932915639, 0.7939265333501738, 0.9310447043071594, 0.3158528539227292, 0.37032086825558597, 0.9862021757230087, 0.26388911560389294, 0.5992592343444941, 0.1643513839435169, 0.4377646962754742, 0.8303227829816284, 0.20937385107730877, 0.8324060873454271, 0.021364238174030548, 0.6859476702546505, 0.5716698661745526, 0.5882747274723809, 0.12647492481200606, 0.9303723660197447},
				{0.7233775872512589, 0.046938233995641676, 0.494888354924115, 0.2513678159339394, 0.6757317762295691, 0.30101247210555016, 0.13067937283153275, 0.6711798638228437, 0.5246786495801548, 0.6426015339698176, 0.22671334228661066, 0.37588889375555046, 0.881606543670014, 0.1478761994069726, 0.2539656366115637, 0.43937019670662014, 0.4153903410006523, 0.9129825405930613, 0.8452756859400462, 0.715323311914232},
				{0.29801650347132513, 0.3324243233234041, 0.8717594708570402, 0.16400232406551885, 0.12828238598680997, 0.4448518093294199, 0.1579557907885809, 0.4046932442975485, 0.47153927525982253, 0.03622949075780357, 0.6108835462638338, 0.3406487037594047, 0.49817632456925987, 0.8866431046153291, 0.14853827084991544, 0.2901042282361742, 0.32951794399252643, 0.27454646701676433, 0.7049584365164823, 0.1751644751998256},
				{0.6070345636688501, 0.6110368535044267, 0.7618427893007013, 0.9697616578982597, 0.48924312414546256, 0.8667874535179676, 0.3108023094599436, 0.7885529083965351, 0.7503996396469541, 0.2755537746428216, 0.8856814707964553, 0.7105367100006003, 0.9060635600328482, 0.650710626578361, 0.32098516016050327, 0.6743333669270063, 0.3228398473685845, 0.5350648383366153, 0.19029925463498543, 0.5564878250021131},
				{0.08308081591890881, 0.3192282560731803, 0.4576942766624531, 0.8498178129995398, 0.9700574097008967, 0.4101243132452107, 0.735453367342526, 0.19574391537390556, 0.3150848799080723, 0.5087409750974797, 0.6830669177167097, 0.39270240804650525, 0.6053155290077353, 0.06503151156982079, 0.5052883205044938, 0.40215581899221, 0.6893868238711577, 0.01790380691164828, 0.21114649840721744, 0.3043801848642528},
				{0.1378405318157112, 0.9995279510178111, 0.2811623814520633, 0.11812184887350397, 0.8162044567742129, 0.2857308555787047, 0.6566185833262699, 0.8913812329775249, 0.01085530665142942, 0.9080359551942202, 0.5125821535944703, 0.4949941286614453, 0.5112576426588452, 0.5079445273451701, 0.10548302047749869, 0.10634654460826065, 0.8969004473910351, 0.7103450903261264, 0.09640116185417968, 0.45747151293087296},
				{0.9032293174982412, 0.02047558567628094, 0.14281809087456843, 0.53994183626675, 0.14809916056066386, 0.5076524972241079, 0.22443889373030979, 0.6083858040702504, 0.6887483322853394, 0.8290203763839206, 0.12279350620322727, 0.005117500795612795, 0.849022281873738, 0.46786350893588435, 0.7096766161305453, 0.5402871318630239, 0.5075507302720593, 0.41356150340628917, 0.21608800285488272, 0.9051210421374632},
				{0.5698096467082127, 0.8940588439643858, 0.45118588950570715, 0.8702349467589525, 0.6604752802422417, 0.1867580011050478, 0.019868029423222078, 0.8266681998107964, 0.1672041374579688, 0.9800344749326928, 0.9479464347033382, 0.5642008133308489, 0.6429499556935946, 0.23511146990347076, 0.7654836261493393, 0.04967903340857316, 0.23115436188881444, 0.006820544524479999, 0.021709251722732414, 0.3674893580502383},
				{0.21662520416303932, 0.22181430308772798, 0.4090380902644326, 0.9149851070488141, 0.02464272501754783, 0.9840854509341512, 0.15906159363370187, 0.4075833567117001, 0.9918105401085586, 0.5801863300338025, 0.1399870712301189, 0.24141431976316097, 0.014394617676543264, 0.9903316162163268, 0.13284959798396057, 0.28581957640971933, 0.7433705365499408, 0.3766061154408711, 0.0929240102003962, 0.23365909706962174},
				{0.3401252533143161, 0.7157887840973897, 0.8131153056172897, 0.22430133504607142, 0.9327366371228113, 0.4718429343598496, 0.2977077092663286, 0.5723348845962294, 0.8199804498892334, 0.9619115469032684, 0.3277040107883974, 0.0844540579954397, 0.15869084139660583, 0.8596962362926387, 0.15308846051975045, 0.6276345770454449, 0.33982738921792677, 0.10138686620977311, 0.9826981286042497, 0.32363036860199645},
				{0.5095777074626169, 0.3118481040607072, 0.9589889302789923, 0.9879855327933912, 0.724051821998927, 0.7525583837272134, 0.6028343059887507, 0.206170537649229, 0.0396007022910253, 0.7078356473784209, 0.2925962210623485, 0.7451151575910349, 0.43551777322481955, 0.17217329447619412, 0.20205931400003863, 0.8353248359263227, 0.8418594109182772, 0.6790490826989143, 0.26342100117848344, 0.22693155119921105},
				{0.7023461342470535, 0.12035825839135073, 0.14438161906062508, 0.8224438907048657, 0.4407836424142949, 0.44566199968365616, 0.9324803554874924, 0.11962529728215787, 0.9191684718781854, 0.20173056199417727, 0.2051744615022909, 0.6598435529962826, 0.47662075742636845, 0.9754000799535685, 0.4307603142570442, 0.1703986445222927, 0.4205118969033076, 0.9365508945129997, 0.19308701861099975, 0.11374998152299098},
				{0.9046325011183781, 0.8430543139874331, 0.562114452896996, 0.9122284349523804, 0.9739718960801464, 0.06582371912324758, 0.042719428419676686, 0.20373196436374852, 0.18165752474116004, 0.41964521279344513, 0.9257547951683918, 0.10206899021492355, 0.5908286943281, 0.8442517303459484, 0.5382186016114038, 0.5850258936335433, 0.16269593180673103, 0.2701440378679033, 0.8434912114845595, 0.8139011254804089},
				{0.5017639096246684, 0.3249505496409504, 0.07795035191171817, 0.40016042160907317, 0.6801719650469599, 0.8886575535174793, 0.6268755821531199, 0.3780336879987549, 0.3953334472891571, 0.8898299490671228, 0.14040470527734017, 0.9162863850235218, 0.02853120738230308, 0.14998224310266872, 0.9694071779469422, 0.6080636931580478, 0.2668531205006237, 0.529547807200103, 0.3614901492280148, 0.5146187800725178},
				{0.8268285844445469, 0.10643453053176843, 0.4989549988616401, 0.006901432673167229, 0.47535289157588545, 0.6269429903222922, 0.3833734516607964, 0.8483966058229818, 0.9819631917018842, 0.008863090124014317, 0.7755539928342187, 0.8932668885487132, 0.8562565114271996, 0.24785369835179494, 0.8850210712637808, 0.23576718720339607, 0.7252164497971076, 0.6807494806974206, 0.2697307537194342, 0.6400633580522539},
				{0.9874422356585982, 0.19322713324887908, 0.45459845359248685, 0.6040010113340365, 0.9447497229059552, 0.6243035818807259, 0.10651552344093151, 0.46603498842075786, 0.9563412978629412, 0.3164268729044569, 0.2138835702020191, 0.5514432785937711, 0.2867175237467776, 0.4874596289207306, 0.6102962838782335, 0.4721141339868111, 0.22573018365711728, 0.8596445011531609, 0.35485080863369867, 0.3436086417662185}
			}),
			
//			new Matrix(new double[][] {
//				{0.39952630492250185, 0.8736500547250404, 0.4798435228788178, 0.6197207412291529, 0.6211445202770014, 0.9112032055020536, 0.31886822415314486, 0.8264114651413172, 0.17305196264703449, 0.7104191024700085, 0.4043665385594075, 0.5082783377108547, 0.3419345925688547, 0.9941533014778546, 0.36627346594639887, 0.5013463106062429, 0.075864363419191, 0.7097684933143975, 0.3863435556423681, 0.46534764992383826},
//				{0.08686760093414858, 0.06146794890110918, 0.5541720832215905, 0.3677083244857121, 0.8622011132556363, 0.24843281201476075, 0.19053289635566173, 0.8663466998920747, 0.010391680606588793, 0.3477584950305578, 0.06067083179193944, 0.42139319996078184, 0.18157163045205882, 0.696224990979999, 0.9792880878641629, 0.27160361226172725, 0.3963694733258154, 0.07122410816798364, 0.1693159357212447, 0.24815271323108445},
//				{0.9935911143738577, 0.9487064121206807, 0.8781639689271983, 0.7666592433584125, 0.564153772372135, 0.12479962465239669, 0.1779914521506104, 0.23770694599844866, 0.177211610329699, 0.02778890288676583, 0.5806463146984202, 0.5667907355734915, 0.9241379133894649, 0.11843871111589, 0.08326917883018636, 0.3765309349122181, 0.30700615259807285, 0.8791754285933993, 0.5271612644179855, 0.07716269207695425},
//				{0.2804378560541675, 0.02643821464090168, 0.7003666666400209, 0.9357217817348069, 0.81916256744873, 0.7455451394703145, 0.4435208702746275, 0.8500118659170547, 0.728361534465914, 0.9437106947709986, 0.12886930706297395, 0.6203526491415133, 0.03984274686577949, 0.7443894776769646, 0.27396077651611106, 0.13027200635019598, 0.7443224436699988, 0.7049105853318196, 0.7243727514199827, 0.9967198323753241},
//				{0.7985641163753538, 0.5294052932915639, 0.7939265333501738, 0.9310447043071594, 0.3158528539227292, 0.37032086825558597, 0.9862021757230087, 0.26388911560389294, 0.5992592343444941, 0.1643513839435169, 0.4377646962754742, 0.8303227829816284, 0.20937385107730877, 0.8324060873454271, 0.021364238174030548, 0.6859476702546505, 0.5716698661745526, 0.5882747274723809, 0.12647492481200606, 0.9303723660197447},
//				{0.7233775872512589, 0.046938233995641676, 0.494888354924115, 0.2513678159339394, 0.6757317762295691, 0.30101247210555016, 0.13067937283153275, 0.6711798638228437, 0.5246786495801548, 0.6426015339698176, 0.22671334228661066, 0.37588889375555046, 0.881606543670014, 0.1478761994069726, 0.2539656366115637, 0.43937019670662014, 0.4153903410006523, 0.9129825405930613, 0.8452756859400462, 0.715323311914232},
//				{0.29801650347132513, 0.3324243233234041, 0.8717594708570402, 0.16400232406551885, 0.12828238598680997, 0.4448518093294199, 0.1579557907885809, 0.4046932442975485, 0.47153927525982253, 0.03622949075780357, 0.6108835462638338, 0.3406487037594047, 0.49817632456925987, 0.8866431046153291, 0.14853827084991544, 0.2901042282361742, 0.32951794399252643, 0.27454646701676433, 0.7049584365164823, 0.1751644751998256},
//				{0.6070345636688501, 0.6110368535044267, 0.7618427893007013, 0.9697616578982597, 0.48924312414546256, 0.8667874535179676, 0.3108023094599436, 0.7885529083965351, 0.7503996396469541, 0.2755537746428216, 0.8856814707964553, 0.7105367100006003, 0.9060635600328482, 0.650710626578361, 0.32098516016050327, 0.6743333669270063, 0.3228398473685845, 0.5350648383366153, 0.19029925463498543, 0.5564878250021131},
//				{0.08308081591890881, 0.3192282560731803, 0.4576942766624531, 0.8498178129995398, 0.9700574097008967, 0.4101243132452107, 0.735453367342526, 0.19574391537390556, 0.3150848799080723, 0.5087409750974797, 0.6830669177167097, 0.39270240804650525, 0.6053155290077353, 0.06503151156982079, 0.5052883205044938, 0.40215581899221, 0.6893868238711577, 0.01790380691164828, 0.21114649840721744, 0.3043801848642528},
//				{0.1378405318157112, 0.9995279510178111, 0.2811623814520633, 0.11812184887350397, 0.8162044567742129, 0.2857308555787047, 0.6566185833262699, 0.8913812329775249, 0.01085530665142942, 0.9080359551942202, 0.5125821535944703, 0.4949941286614453, 0.5112576426588452, 0.5079445273451701, 0.10548302047749869, 0.10634654460826065, 0.8969004473910351, 0.7103450903261264, 0.09640116185417968, 0.45747151293087296},
//				{0.9032293174982412, 0.02047558567628094, 0.14281809087456843, 0.53994183626675, 0.14809916056066386, 0.5076524972241079, 0.22443889373030979, 0.6083858040702504, 0.6887483322853394, 0.8290203763839206, 0.12279350620322727, 0.005117500795612795, 0.849022281873738, 0.46786350893588435, 0.7096766161305453, 0.5402871318630239, 0.5075507302720593, 0.41356150340628917, 0.21608800285488272, 0.9051210421374632},
//				{0.5698096467082127, 0.8940588439643858, 0.45118588950570715, 0.8702349467589525, 0.6604752802422417, 0.1867580011050478, 0.019868029423222078, 0.8266681998107964, 0.1672041374579688, 0.9800344749326928, 0.9479464347033382, 0.5642008133308489, 0.6429499556935946, 0.23511146990347076, 0.7654836261493393, 0.04967903340857316, 0.23115436188881444, 0.006820544524479999, 0.021709251722732414, 0.3674893580502383},
//				{0.21662520416303932, 0.22181430308772798, 0.4090380902644326, 0.9149851070488141, 0.02464272501754783, 0.9840854509341512, 0.15906159363370187, 0.4075833567117001, 0.9918105401085586, 0.5801863300338025, 0.1399870712301189, 0.24141431976316097, 0.014394617676543264, 0.9903316162163268, 0.13284959798396057, 0.28581957640971933, 0.7433705365499408, 0.3766061154408711, 0.0929240102003962, 0.23365909706962174},
//				{0.3401252533143161, 0.7157887840973897, 0.8131153056172897, 0.22430133504607142, 0.9327366371228113, 0.4718429343598496, 0.2977077092663286, 0.5723348845962294, 0.8199804498892334, 0.9619115469032684, 0.3277040107883974, 0.0844540579954397, 0.15869084139660583, 0.8596962362926387, 0.15308846051975045, 0.6276345770454449, 0.33982738921792677, 0.10138686620977311, 0.9826981286042497, 0.32363036860199645},
//				{0.5095777074626169, 0.3118481040607072, 0.9589889302789923, 0.9879855327933912, 0.724051821998927, 0.7525583837272134, 0.6028343059887507, 0.206170537649229, 0.0396007022910253, 0.7078356473784209, 0.2925962210623485, 0.7451151575910349, 0.43551777322481955, 0.17217329447619412, 0.20205931400003863, 0.8353248359263227, 0.8418594109182772, 0.6790490826989143, 0.26342100117848344, 0.22693155119921105},
//				{0.7023461342470535, 0.12035825839135073, 0.14438161906062508, 0.8224438907048657, 0.4407836424142949, 0.44566199968365616, 0.9324803554874924, 0.11962529728215787, 0.9191684718781854, 0.20173056199417727, 0.2051744615022909, 0.6598435529962826, 0.47662075742636845, 0.9754000799535685, 0.4307603142570442, 0.1703986445222927, 0.4205118969033076, 0.9365508945129997, 0.19308701861099975, 0.11374998152299098},
//				{0.9046325011183781, 0.8430543139874331, 0.562114452896996, 0.9122284349523804, 0.9739718960801464, 0.06582371912324758, 0.042719428419676686, 0.20373196436374852, 0.18165752474116004, 0.41964521279344513, 0.9257547951683918, 0.10206899021492355, 0.5908286943281, 0.8442517303459484, 0.5382186016114038, 0.5850258936335433, 0.16269593180673103, 0.2701440378679033, 0.8434912114845595, 0.8139011254804089},
//				{0.5017639096246684, 0.3249505496409504, 0.07795035191171817, 0.40016042160907317, 0.6801719650469599, 0.8886575535174793, 0.6268755821531199, 0.3780336879987549, 0.3953334472891571, 0.8898299490671228, 0.14040470527734017, 0.9162863850235218, 0.02853120738230308, 0.14998224310266872, 0.9694071779469422, 0.6080636931580478, 0.2668531205006237, 0.529547807200103, 0.3614901492280148, 0.5146187800725178},
//				{0.8268285844445469, 0.10643453053176843, 0.4989549988616401, 0.006901432673167229, 0.47535289157588545, 0.6269429903222922, 0.3833734516607964, 0.8483966058229818, 0.9819631917018842, 0.008863090124014317, 0.7755539928342187, 0.8932668885487132, 0.8562565114271996, 0.24785369835179494, 0.8850210712637808, 0.23576718720339607, 0.7252164497971076, 0.6807494806974206, 0.2697307537194342, 0.6400633580522539},
//				{0.9874422356585982, 0.19322713324887908, 0.45459845359248685, 0.6040010113340365, 0.9447497229059552, 0.6243035818807259, 0.10651552344093151, 0.46603498842075786, 0.9563412978629412, 0.3164268729044569, 0.2138835702020191, 0.5514432785937711, 0.2867175237467776, 0.4874596289207306, 0.6102962838782335, 0.4721141339868111, 0.22573018365711728, 0.8596445011531609, 0.35485080863369867, 0.3436086417662185}
//			})
		};
		
		System.out.println("Initial: " + network.feedForward(input)[0]);
		System.out.println("------");
		
		Matrix[][] kernals = new Matrix[conv2.kernalCount][conv2.kernals[0].length];
		for(int i = 0; i < kernals.length; i++) {
		for(int j = 0; j < kernals[0].length; j++) {
			kernals[i][j] = new Matrix(conv2.kernals[i][j]);
		}}
		
		for(int i = 0; i < 1000; i++) {
			network.feedForward(input);
			network.backpropogate(new Matrix[] {
				new Matrix(new double[][] {
					{.5}
				}),
			});
		}
		
		System.out.println("Final: " + network.feedForward(input)[0]);
		System.out.println("------");
		for(int i = 0; i < kernals.length; i++) {
		for(int j = 0; j < kernals[0].length; j++) {
			System.out.println(kernals[i][j].subtract(conv2.getKernals()[i][j]));
		}}
	}
}
